<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.checklistbank.service.mybatis.mapper.NameUsageMapper">

    <!--
    The vernacular name is omitted here and added later in the service implementation to avoid nasty SQL
    select distinct on (u.id) cannot be used directly as we need to have a different sort order
    -->
    <sql id="select">u.id, u.name_fk, rel.nub_fk, u.dataset_key, u.constituent_key,
CASE WHEN u.is_synonym THEN par.parent_fk ELSE u.parent_fk END as parentKey,
CASE WHEN u.is_synonym THEN coalesce(parn2.canonical_name, parn2.scientific_name) ELSE coalesce(parn.canonical_name, parn.scientific_name) END as parent,
CASE WHEN u.is_synonym THEN u.parent_fk ELSE null END as acceptedKey,
CASE WHEN u.is_synonym THEN parn.scientific_name ELSE null END as accepted,
u.basionym_fk, basn.scientific_name as basionym,
u.is_synonym, u.pp_synonym_fk, u.origin,u.status,u.nom_status,u.rank,u.references,
n.scientific_name, n.canonical_name, n.type as nameType,
authorship_full(n.authorship,n.year,n.bracket_authorship, n.bracket_year) as authorship,
pub.citation as publishedIn, accto.citation as accordingTo,
u.taxon_id, u.source_taxon_key, u."references",
ku.id as kid, coalesce(kn.canonical_name,kn.scientific_name) as kingdom,
pu.id as pid, coalesce(pn.canonical_name,pn.scientific_name) as phylum,
cu.id as cid, coalesce(cn.canonical_name,cn.scientific_name) as class,
ou.id as oid, coalesce(onn.canonical_name,onn.scientific_name) as order,
fu.id as fid, coalesce(fn.canonical_name,fn.scientific_name) as family,
gu.id as gid, coalesce(gn.canonical_name,gn.scientific_name) as genus,
sgu.id as sgid, coalesce(sgn.canonical_name,sgn.scientific_name) as subgenus,
su.id as sid, coalesce(sn.canonical_name,sn.scientific_name) as species,
u.num_descendants, u.modified, u.last_interpreted, m.downloaded as last_crawled, u.deleted, u.remarks, u.issues
</sql>

    <sql id="selectParsedName">
        <include refid="select"/>,
        n.id as name_key, n.scientific_name as name_scientific_name,
        n.genus_or_above, n.infra_generic, n.specific_epithet, n.infra_specific_epithet,
        n.cultivar_epithet, n.strain,
        n.notho_type, n.rank as name_rank, n.nom_status as name_nom_status, n.sensu as name_sensu,
        n.remarks as name_remarks,
        n.parsed_partially as name_parsed_partially, n.parsed as name_parsed,
        n.authorship as name_authorship, n.year as name_year,
        n.bracket_authorship as name_bracket_authorship, n.bracket_year as name_bracket_year
    </sql>

    <sql id="from"> name_usage u
 JOIN name n ON u.name_fk=n.id
 LEFT JOIN dataset_metrics m ON m.dataset_key=u.dataset_key AND m.latest
 LEFT JOIN nub_rel rel ON u.id=rel.usage_fk

 LEFT JOIN citation pub on u.name_published_in_fk=pub.id
 LEFT JOIN citation accto on u.according_to_fk=accto.id

 LEFT JOIN name_usage ku on u.kingdom_fk=ku.id
 LEFT JOIN name kn on ku.name_fk=kn.id

 LEFT JOIN name_usage pu on u.phylum_fk=pu.id
 LEFT JOIN name pn on pu.name_fk=pn.id

 LEFT JOIN name_usage cu on u.class_fk=cu.id
 LEFT JOIN name cn on cu.name_fk=cn.id

 LEFT JOIN name_usage ou on u.order_fk=ou.id
 LEFT JOIN name onn on ou.name_fk=onn.id

 LEFT JOIN name_usage fu on u.family_fk=fu.id
 LEFT JOIN name fn on fu.name_fk=fn.id

 LEFT JOIN name_usage gu on u.genus_fk=gu.id
 LEFT JOIN name gn on gu.name_fk=gn.id

 LEFT JOIN name_usage sgu on u.subgenus_fk=sgu.id
 LEFT JOIN name sgn on sgu.name_fk=sgn.id

 LEFT JOIN name_usage su on u.species_fk=su.id
 LEFT JOIN name sn on su.name_fk=sn.id

 LEFT JOIN name_usage par on u.parent_fk=par.id
 LEFT JOIN name parn on par.name_fk=parn.id

 LEFT JOIN name_usage par2 on par.parent_fk=par2.id
 LEFT JOIN name parn2 on par2.name_fk=parn2.id

 LEFT JOIN name_usage bas on u.basionym_fk=bas.id
 LEFT JOIN name basn on bas.name_fk=basn.id
 </sql>

    <sql id="page">LIMIT #{page.limit} OFFSET #{page.offset}</sql>


    <!--  A mapping to build a NameUsage without any identifiers or a vernacular name -->
    <resultMap id="usageResultMap" type="NameUsage" autoMapping="true">
        <id property="key" column="id"/>
        <result property="nameKey" column="name_fk"/>
        <result property="nubKey" column="nub_fk"/>
        <result property="proParteKey" column="pp_synonym_fk"/>
        <result property="basionymKey" column="basionym_fk"/>
        <result property="taxonomicStatus" column="status"/>
        <result property="nomenclaturalStatus" column="nom_status"
                typeHandler="org.gbif.checklistbank.service.mybatis.postgres.ArraySetNomenclaturalStatusTypeHandler"/>
        <result property="kingdomKey" column="kid"/>
        <result property="phylumKey" column="pid"/>
        <result property="classKey" column="cid"/>
        <result property="clazz" column="class"/>
        <result property="orderKey" column="oid"/>
        <result property="familyKey" column="fid"/>
        <result property="genusKey" column="gid"/>
        <result property="subgenusKey" column="sgid"/>
        <result property="speciesKey" column="sid"/>
        <result property="references" column="references"/>
        <result property="issues" column="issues"
                typeHandler="org.gbif.checklistbank.service.mybatis.postgres.ArraySetIssueTypeHandler"/>
    </resultMap>

    <!--  A mapping to build a ParsedNameUsage extending a NameUsage with a ParsedName instance. -->
    <resultMap id="parsedUsageResultMap" type="ParsedNameUsage" extends="usageResultMap">
        <id property="parsedName.key" column="name_key"/>
        <result property="parsedName.type" column="nameType"/>
        <result property="parsedName.rank" column="name_rank"/>
        <result property="parsedName.notho" column="notho_type"/>

        <result property="parsedName.scientificName" column="name_scientific_name"/>
        <result property="parsedName.genusOrAbove" column="genus_or_above"/>
        <result property="parsedName.infraGeneric" column="infra_generic"/>
        <result property="parsedName.specificEpithet" column="specific_epithet"/>
        <result property="parsedName.infraSpecificEpithet" column="infra_specific_epithet"/>
        <result property="parsedName.cultivarEpithet" column="cultivar_epithet"/>
        <result property="parsedName.strain" column="strain"/>
        <result property="parsedName.nomStatus" column="name_nom_status"/>
        <result property="parsedName.sensu" column="name_sensu"/>
        <result property="parsedName.remarks" column="name_remarks"/>
        <result property="parsedName.parsedPartially" column="name_parsed_partially"/>
        <result property="parsedName.parsed" column="name_parsed"/>
        <result property="parsedName.authorship" column="name_authorship"/>
        <result property="parsedName.year" column="name_year"/>
        <result property="parsedName.bracketAuthorship" column="name_bracket_authorship"/>
        <result property="parsedName.bracketYear" column="name_bracket_year"/>
    </resultMap>

    <resultMap id="scinameResultMap" type="RankedName" autoMapping="true">
        <result property="key" column="id"/>
        <result property="name" column="scientific_name"/>
        <result property="rank" column="rank"/>
    </resultMap>


    <!--  A mapping to build a NameUsage with just the issue set and the usage key.
            We need this mapping as mybatis cannot return a typed set with a specific type handler -->
    <resultMap id="issueResultMap" type="NameUsage">
        <id property="key" column="id"/>
        <result property="issues" column="issues"
                typeHandler="org.gbif.checklistbank.service.mybatis.postgres.ArraySetIssueTypeHandler"/>
    </resultMap>

    <!--  Get by primary key -->
    <select id="get" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.id=#{key}
    </select>

    <!--  get just the key by taxonid & dataset  -->
    <select id="getKey" parameterType="map" resultType="java.lang.Integer">
    SELECT id FROM name_usage
    WHERE taxon_id=#{taxonId} AND dataset_key=#{uuid, jdbcType=OTHER}
    LIMIT 1
  </select>

    <!--  list all usage ids -->
    <select id="list" parameterType="map" resultType="java.lang.Integer">
        SELECT id FROM name_usage
        WHERE deleted IS NULL
        <if test="uuid != null">
            AND dataset_key=#{uuid,jdbcType=OTHER}
        </if>
        ORDER BY id
        <include refid="page"/>
    </select>

    <!--  count all usages -->
    <select id="count" parameterType="map" resultType="java.lang.Integer">
        SELECT count(*) FROM name_usage
        WHERE deleted IS NULL
        <if test="uuid != null">
            AND dataset_key=#{uuid,jdbcType=OTHER}
        </if>
    </select>

    <!--  the maximum usage key used in the nub incl deleted usages -->
    <select id="maxUsageKey" parameterType="map" resultType="java.lang.Integer">
    SELECT max(u.id)
    FROM name_usage u
    WHERE u.dataset_key=#{uuid,jdbcType=OTHER}
  </select>

    <!--  list a range of name usage container -->
    <select id="listRange" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.id between #{start} and #{end}
    </select>

    <!--  select all name usages of a dataset
     Using a optimal fetchsize to enable low memory footprint while keeping good performance using a resulthandler
    -->
    <select id="processDataset" parameterType="map" resultMap="parsedUsageResultMap"
            fetchSize="10000" resultSetType="FORWARD_ONLY">
        SELECT
        <include refid="selectParsedName"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.dataset_key=#{uuid,jdbcType=OTHER}
    </select>

    <!--  select all name usages of a dataset
     Using a optimal fetchsize to enable low memory footprint while keeping good performance using a resulthandler
    -->
    <select id="processAllNames" resultMap="scinameResultMap" fetchSize="10000"
            resultSetType="FORWARD_ONLY">
    SELECT id,rank,scientific_name
    FROM tmp_usage_name
  </select>

    <!--  list root usages -->
    <select id="listRoot" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.parent_fk is null and u.is_synonym=false and
        u.dataset_key=#{uuid, jdbcType=OTHER}
        ORDER BY u.rank, n.scientific_name
        <include refid="page"/>
    </select>

    <!--  list usage children -->
    <select id="listChildren" parameterType="map" resultMap="usageResultMap">
        WITH child_query AS (
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.parent_fk=#{key} and u.is_synonym=false
        )
        SELECT * FROM child_query
        ORDER BY rank, scientific_name
        <include refid="page"/>
    </select>

    <!--  list usage synonyms -->
    <select id="listSynonyms" parameterType="map" resultMap="usageResultMap">
        WITH child_query AS (
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.parent_fk=#{key} and u.is_synonym=true
        )
        SELECT * FROM child_query
        ORDER BY scientific_name
        <include refid="page"/>
    </select>

    <!--  list related -->
    <select id="listRelated" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE rel.nub_fk=#{key}
        <if test="uuids!=null and uuids.length > 0">
            and u.dataset_key in
            <foreach item="uuid" index="index" collection="uuids" open="(" separator="," close=")">
                #{uuid, jdbcType=OTHER}
            </foreach>
        </if>
        ORDER BY rel.dataset_key, rel.usage_fk
        <include refid="page"/>
    </select>

    <!--  list combinations -->
    <select id="listCombinations" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.basionym_fk=#{key} AND u.basionym_fk!=u.id
    </select>

    <!--  list  -->
    <select id="listByTaxonId" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND u.taxon_id=#{taxonId}
        <if test="uuid != null">
            AND u.dataset_key=#{uuid, jdbcType=OTHER}
        </if>
        ORDER BY u.id
        <include refid="page"/>
    </select>

    <!--  list by canonical name, case insensitive -->
    <select id="listByCanonicalName" parameterType="map" resultMap="usageResultMap">
        SELECT
        <include refid="select"/>
        FROM
        <include refid="from"/>
        WHERE u.deleted IS NULL AND lower(n.canonical_name) = lower(#{canonical})
        <if test="uuids != null">
            and u.dataset_key in
            <foreach item="uuid" index="index" collection="uuids" open="(" separator="," close=")">
                #{uuid, jdbcType=OTHER}
            </foreach>
        </if>
        ORDER BY u.id
        <include refid="page"/>
    </select>

    <sql id="writeFields">
    constituent_key, name_fk, rank,
    parent_fk, is_synonym, status,
    nom_status,
    issues,
    name_published_in_fk, according_to_fk, origin,
    remarks, "references", taxon_id, source_taxon_key, modified, num_descendants, last_interpreted,
    pp_synonym_fk, basionym_fk,
    kingdom_fk, phylum_fk, class_fk, order_fk, family_fk, genus_fk, subgenus_fk, species_fk
  </sql>
    <sql id="writeValues">
    #{u.constituentKey}, #{u.nameKey}, #{u.rank}::rank,
    #{u.parentKey}, #{u.isSynonym}, #{u.taxonomicStatus}::taxonomic_status,
    #{u.nomenclaturalStatus, typeHandler=org.gbif.checklistbank.service.mybatis.postgres.ArraySetNomenclaturalStatusTypeHandler },
    #{u.issues, typeHandler=org.gbif.checklistbank.service.mybatis.postgres.ArraySetIssueTypeHandler },
    #{u.publishedInKey}, #{u.accordingToKey}, #{u.origin}::origin_type,
    #{u.remarks}, #{u.references}, #{u.taxonID}, #{u.sourceTaxonKey}, #{u.modified}, #{u.numDescendants}, now()
  </sql>
    <insert id="insert" parameterType="NameUsageWritable" useGeneratedKeys="true"
            keyProperty="u.key" keyColumn="id">
        INSERT INTO name_usage (
        <if test="u.key != null">id,</if>
        <include refid="writeFields"/>, dataset_key)
        VALUES (
        <if test="u.key != null">#{u.key},</if>
        <include refid="writeValues"/>,
        <if test="u.proParteKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.proParteKey != -1">#{u.proParteKey},</if>
        <if test="u.basionymKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.basionymKey != -1">#{u.basionymKey},</if>
        <if test="u.kingdomKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.kingdomKey != -1">#{u.kingdomKey},</if>
        <if test="u.phylumKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.phylumKey != -1">#{u.phylumKey},</if>
        <if test="u.classKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.classKey != -1">#{u.classKey},</if>
        <if test="u.orderKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.orderKey != -1">#{u.orderKey},</if>
        <if test="u.familyKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.familyKey != -1">#{u.familyKey},</if>
        <if test="u.genusKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.genusKey != -1">#{u.genusKey},</if>
        <if test="u.subgenusKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.subgenusKey != -1">#{u.subgenusKey},</if>
        <if test="u.speciesKey == -1">COALESCE(#{u.key}, currval('name_usage_id_seq')),</if>
        <if test="u.speciesKey != -1">#{u.speciesKey},</if>
        #{u.datasetKey}
        )
    </insert>

    <update id="update" parameterType="NameUsageWritable">
        UPDATE name_usage
        SET (deleted,<include refid="writeFields"/>)
        = (null,<include refid="writeValues"/>,
        #{u.proParteKey},
        #{u.basionymKey},
        #{u.kingdomKey},
        #{u.phylumKey},
        #{u.classKey},
        #{u.orderKey},
        #{u.familyKey},
        #{u.genusKey},
        #{u.subgenusKey},
        #{u.speciesKey}
        )
        WHERE id = #{u.key}
    </update>

    <update id="updateForeignKeys" parameterType="Integer">
        UPDATE name_usage
        <set>
            <if test="par != null">parent_fk = #{par},</if>
            <if test="bas != null">basionym_fk = #{bas},</if>
        </set>
        WHERE id=#{key}
    </update>

    <select id="getIssues" parameterType="map" resultMap="issueResultMap">
        SELECT id, issues
        FROM name_usage
        WHERE id = #{key}
    </select>

    <select id="listNoMatchUsageKeys" parameterType="map" resultType="Integer">
        SELECT id
        FROM name_usage
        WHERE dataset_key=#{uuid, jdbcType=OTHER}
            AND issues @> array['BACKBONE_MATCH_NONE']
    </select>

    <update id="updateIssues" parameterType="map">
        UPDATE name_usage
        SET issues = #{issues, typeHandler=org.gbif.checklistbank.service.mybatis.postgres.ArraySetIssueTypeHandler}
        WHERE id=#{key}
    </update>

    <update id="addIssue" parameterType="map">
        UPDATE name_usage
        SET issues = array_append(issues, #{issue})
        WHERE id=#{key}
    </update>

    <update id="removeIssue" parameterType="map">
        UPDATE name_usage
        SET issues = array_remove(issues, #{issue})
        WHERE id=#{key}
    </update>

    <update id="updateName" parameterType="map">
    UPDATE name_usage
    SET name_fk = #{nkey}, modified=now()
    WHERE id=#{key}
  </update>

</mapper>

