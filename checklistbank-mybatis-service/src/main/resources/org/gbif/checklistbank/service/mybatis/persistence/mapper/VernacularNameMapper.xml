<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.checklistbank.service.mybatis.persistence.mapper.VernacularNameMapper">

  <sql id="selectCommon">v.id, v.name, v.language, v.country, v.area, preferred, v.sex, v.life_stage, v.plural</sql>
  <sql id="select">v.usage_fk AS usageKey, null AS sourceTaxonKey, c.citation as source, <include refid="selectCommon"/></sql>
  <sql id="selectNub">rel.nub_fk as usageKey, v.usage_fk as sourceTaxonKey, d.title as source, <include refid="selectCommon"/></sql>

  <sql id="from">vernacular_name v
    LEFT JOIN citation c ON v.source_fk=c.id
  </sql>
  <sql id="fromNub">vernacular_name v
    JOIN nub_rel rel ON rel.usage_fk=v.usage_fk
    <include refid="org.gbif.checklistbank.service.mybatis.persistence.mapper.Common.excludeRels"/>
    LEFT JOIN dataset d ON rel.dataset_key=d.key
  </sql>

  <sql id="page">LIMIT #{page.limit} OFFSET #{page.offset}</sql>

  <!--  A mapping to build a VernacularName -->
  <resultMap id="vernacularResultMap" type="VernacularName" autoMapping="true">
    <result property="taxonKey" column="usageKey"/>
    <result property="vernacularName" column="name"/>
  </resultMap>

  <resultMap id="vernacularRangeResultMap" type="UsageRelated" autoMapping="true">
    <id property="usageKey" column="usageKey"/>
    <id property="value" column="id"></id>
    <association property="value" javaType="VernacularName" resultMap="vernacularResultMap" />
  </resultMap>

  <!-- get one by checklist usage-->
  <select id="getByChecklistUsage" parameterType="map" resultMap="vernacularResultMap">
    SELECT
    <include refid="select"/>
    FROM
    <include refid="from"/>
    WHERE v.usage_fk=#{key} and v.language=#{lang}
    ORDER BY preferred DESC, v.id
    LIMIT 1
  </select>

  <!-- get one by nub usage-->
  <select id="getByNubUsage" parameterType="map" resultMap="vernacularResultMap">
    SELECT
    <include refid="selectNub"/>
    FROM
    <include refid="fromNub"/>
    WHERE rel.nub_fk=#{key} and v.language=#{lang}
    ORDER BY preferred DESC, v.id
    LIMIT 1
  </select>

  <!-- get all verncular names linked to one usage -->
  <select id="listByChecklistUsage" parameterType="map" resultMap="vernacularResultMap">
    SELECT
    <include refid="select"/>
    FROM
    <include refid="from"/>
    WHERE v.usage_fk=#{key}
    ORDER BY preferred DESC, name
    <include refid="page"/>
  </select>

  <!-- get all vernaculars by nub usage -->
  <select id="listByNubUsage" parameterType="map" resultMap="vernacularResultMap">
    SELECT
    <include refid="selectNub"/>
    FROM
    <include refid="fromNub"/>
    WHERE rel.nub_fk=#{key}
    ORDER BY preferred DESC, name
    <include refid="page"/>
  </select>

  <!-- get all verncular names linked to a usage range -->
  <select id="listByChecklistUsageRange" parameterType="map" resultMap="vernacularRangeResultMap">
    SELECT
    <include refid="select"/>
    FROM
    <include refid="from"/>
    WHERE v.usage_fk between #{start} and #{end}
  </select>

  <!-- get all vernaculars linked to a nub usage range -->
  <select id="listByNubUsageRange" parameterType="map" resultMap="vernacularRangeResultMap">
    SELECT
    <include refid="selectNub"/>
    FROM
    <include refid="fromNub"/>
    WHERE rel.nub_fk between #{start} and #{end}
  </select>

  <!--  select all vernacular names of a dataset
Using a optimal fetchsize to enable low memory footprint while keeping good performance using a resulthandler
-->
  <select id="processDataset" parameterType="map" resultMap="vernacularResultMap" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT
    <choose>
      <when test="uuid.toString() == 'd7dddbf4-2cf0-4f39-9b2a-bb099caae36c'">
        <include refid="selectNub"/>
        FROM
        <include refid="fromNub"/>
      </when>
      <otherwise>
        <include refid="select"/>
        FROM
        <include refid="from"/>
        JOIN name_usage u ON u.id=v.usage_fk
        WHERE u.dataset_key=#{uuid,jdbcType=OTHER}
      </otherwise>
    </choose>
  </select>

  <delete id="deleteByUsage">
    DELETE FROM vernacular_name
    WHERE usage_fk = #{key}
  </delete>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    INSERT INTO vernacular_name (usage_fk, name, language, life_stage, sex,
      country, area, preferred, plural, source_fk
    )
    VALUES (#{key}, #{obj.vernacularName}, #{obj.language}, #{obj.lifeStage}::life_stage, #{obj.sex}::sex,
      #{obj.country}, #{obj.area}, #{obj.preferred}, #{obj.plural}, #{sourceKey}
    )
  </insert>

</mapper>
