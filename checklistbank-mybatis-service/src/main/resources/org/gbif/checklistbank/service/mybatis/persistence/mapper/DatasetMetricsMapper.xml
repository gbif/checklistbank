<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.checklistbank.service.mybatis.persistence.mapper.DatasetMetricsMapper">

  <resultMap id="datasetMetrics" type="DatasetMetrics" autoMapping="true">
    <id property="key" column="id" />
    <result property="usagesCount" column="count_usages" />
    <result property="synonymsCount" column="count_synonyms" />
    <result property="distinctNamesCount" column="count_names" />
    <result property="nubMatchingCount" column="count_nub" />
    <result property="colMatchingCount" column="count_col" />
    <result property="nubCoveragePct" column="nubCoverage" />
    <result property="colCoveragePct" column="colCoverage" />
    <result property="countByConstituent" column="count_by_constituent" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreUUIDCountCountTypeHandler"/>
    <result property="countByKingdom" column="count_by_kingdom" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreKingdomCountCountTypeHandler"/>
    <result property="countByRank" column="count_by_rank" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreRankCountCountTypeHandler"/>
    <result property="countByOrigin" column="count_by_origin" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreOriginCountCountTypeHandler"/>
    <result property="countByIssue" column="count_by_issue" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreIssueCountCountTypeHandler"/>
    <result property="countExtRecordsByExtension" column="count_extensions" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreExtensionCountTypeHandler"/>
    <result property="countNamesByLanguage" column="count_vernacular_by_lang" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreLanguageCountCountTypeHandler"/>
    <result property="otherCount" column="count_other" typeHandler="org.gbif.checklistbank.service.mybatis.persistence.postgres.HstoreStringCountTypeHandler"/>
    <result property="created" column="modified" />
    <result property="downloaded" column="downloaded" />
  </resultMap>

  <resultMap id="languageCount" type="Count">
    <result property="key" column="language" javaType="org.gbif.api.vocabulary.Language"/>
    <result property="count" column="cnt" />
  </resultMap>

  <resultMap id="kingdomCount" type="Count">
    <result property="key" column="kingdom_fk" javaType="org.gbif.api.vocabulary.Kingdom"/>
    <result property="count" column="cnt" />
  </resultMap>


  <sql id="SELECT">
    id, dataset_key, count_usages, count_synonyms, count_names,
    count_col, count_nub,
    CASE WHEN count_usages=0 THEN 0 ELSE 100 * count_col / count_usages END AS colCoverage,
    CASE WHEN count_usages=0 THEN 0 ELSE 100 * count_nub / count_usages END AS nubCoverage,
    count_by_constituent, count_by_kingdom, count_by_rank, count_by_origin, count_by_issue, count_extensions, count_vernacular_by_lang,
    count_other, downloaded, created
  </sql>

  <select id="get" parameterType="map" resultMap="datasetMetrics">
    SELECT <include refid="SELECT" />
    FROM dataset_metrics
    WHERE dataset_key=#{uuid} AND latest=true
  </select>

  <select id="list" parameterType="map" resultMap="datasetMetrics">
    SELECT <include refid="SELECT" />
    FROM dataset_metrics
    WHERE dataset_key=#{uuid}
    ORDER BY created DESC
  </select>

  <!--
  creates a new dataset metrics record by doing all the aggregations needed in sql.
  Also updates the existing latest record to be not the latest anymore.
  -->
  <insert id="insert" parameterType="map">
UPDATE dataset_metrics SET latest=false WHERE dataset_key=#{uuid} AND latest=true;

INSERT INTO dataset_metrics
  (dataset_key,downloaded,count_usages,count_synonyms,count_names,count_col,count_nub,  count_by_rank, count_by_constituent, count_by_kingdom, count_by_origin, count_by_issue, count_extensions, count_vernacular_by_lang)
SELECT #{uuid}, #{downloaded},
    (SELECT count(*) FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid}),
    (SELECT count(*) FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid} AND is_synonym=true),
    (SELECT count(distinct(name_fk)) FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid}),
    (SELECT count(distinct(u.id)) FROM name_usage u JOIN nub_rel rel ON rel.usage_fk=u.id JOIN nub_rel col ON col.nub_fk=rel.nub_fk AND col.dataset_key='7ddf754f-d193-4cc9-b351-99906754a03b' WHERE u.deleted IS NULL AND u.dataset_key=#{uuid}),
    (SELECT count(distinct(u.id)) FROM name_usage u JOIN nub_rel rel ON rel.usage_fk=u.id WHERE u.deleted IS NULL AND u.dataset_key=#{uuid}),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
        (SELECT rank AS key, count(*)::text AS cnt FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid} AND is_synonym=false GROUP BY rank) AS ranks
    ),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
        (SELECT constituent_key AS key, count(*)::text AS cnt FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid} GROUP BY constituent_key) AS constituents
    ),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
        (SELECT CASE nub.kingdom_fk
            WHEN 0 THEN 'INCERTAE_SEDIS'
            WHEN 1 THEN 'ANIMALIA'
            WHEN 2 THEN 'ARCHAEA'
            WHEN 3 THEN 'BACTERIA'
            WHEN 4 THEN 'CHROMISTA'
            WHEN 5 THEN 'FUNGI'
            WHEN 6 THEN 'PLANTAE'
            WHEN 7 THEN 'PROTOZOA'
            WHEN 8 THEN 'VIRUSES'
            ELSE 'INCERTAE_SEDIS' END AS key, count(*) as cnt
        FROM name_usage u JOIN nub_rel rel ON rel.usage_fk=u.id JOIN name_usage nub on nub.id=rel.nub_fk
          WHERE u.deleted IS NULL AND u.dataset_key=#{uuid} AND u.is_synonym=false
          GROUP BY nub.kingdom_fk) AS kingdoms
    ),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
        (SELECT origin AS key, count(*)::text AS cnt FROM name_usage WHERE deleted IS NULL AND dataset_key=#{uuid} GROUP BY origin) AS origins
    ),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
      (SELECT iss AS key, count(*)::text AS cnt FROM (
        SELECT unnest(issues) iss from name_usage WHERE deleted IS NULL AND dataset_key=#{uuid}
      ) AS dis GROUP BY key) AS issues
    ),
    (SELECT ('DESCRIPTION => ' || (SELECT count(*)::text FROM description x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('DISTRIBUTION => ' || (SELECT count(*)::text FROM distribution x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('IDENTIFIER => ' || (SELECT count(*)::text FROM identifier x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('MULTIMEDIA => ' || (SELECT count(*)::text FROM media x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('REFERENCE => ' || (SELECT count(*)::text FROM literature x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('SPECIES_PROFILE => ' || (SELECT count(*)::text FROM species_info x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('TYPES_AND_SPECIMEN => ' || (SELECT count(*)::text FROM typification x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
        || ('VERNACULAR_NAME => ' || (SELECT count(*)::text FROM vernacular_name x join name_usage u ON x.usage_fk=u.id WHERE u.dataset_key=#{uuid}))::hstore
    ),
    (SELECT array_to_string(array_agg( key || '=>' || cnt), ', ')::hstore FROM
        (SELECT language AS key, count(*)::text AS cnt FROM vernacular_name x join name_usage u ON x.usage_fk=u.id WHERE u.deleted IS NULL AND u.dataset_key=#{uuid} GROUP BY language) AS ranks
    )
  </insert>
</mapper>
