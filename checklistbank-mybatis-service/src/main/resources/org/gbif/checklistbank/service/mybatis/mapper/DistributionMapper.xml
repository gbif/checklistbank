<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.checklistbank.service.mybatis.mapper.DistributionMapper">

  <sql id="selectCommon">
    d.id, d.location_id, d.locality, d.country,
    d.occurrence_status, d.threat_status,d.establishment_means, d.appendix_cites,
    d.start_day_of_year, d.end_day_of_year,
    d.remarks,d.temporal,d.life_stage
  </sql>
  <sql id="select">
    d.usage_fk AS usageKey, null AS sourceTaxonKey,c.citation as source,<include refid="selectCommon"/>
  </sql>
  <sql id="selectNub">
    rel.nub_fk as usageKey, d.usage_fk as sourceTaxonKey,ds.title as source,<include refid="selectCommon"/>
  </sql>

  <sql id="from">distribution d
    LEFT JOIN citation c ON d.source_fk=c.id
  </sql>
  <sql id="fromNub">distribution d
    JOIN nub_rel rel ON rel.usage_fk=d.usage_fk
    <include refid="org.gbif.checklistbank.service.mybatis.mapper.Common.excludeRels"/>
    LEFT JOIN dataset ds ON rel.dataset_key=ds.key
  </sql>

  <sql id="page">LIMIT #{page.limit} OFFSET #{page.offset}</sql>

  <!--  A mapping to build a Distribution -->
  <resultMap id="distributionResultMap" type="Distribution" autoMapping="true">
    <result property="taxonKey" column="usageKey"/>
    <result property="status" column="occurrence_status"/>
    <result property="source" column="citation"/>
  </resultMap>

  <resultMap id="distributionRangeResultMap" type="UsageRelated" autoMapping="true">
    <id property="usageKey" column="usageKey"/>
    <id property="value" column="id"/>
    <association property="value" javaType="Distribution" resultMap="distributionResultMap" />
  </resultMap>

  <!-- get all distributions linked to one usage -->
  <select id="listByChecklistUsage" parameterType="map" resultMap="distributionResultMap">
    SELECT
    <include refid="select"/>
    FROM
    <include refid="from"/>
    WHERE d.usage_fk=#{key}
    ORDER BY d.country NULLS FIRST, d.id
    <include refid="page"/>
  </select>

  <!-- get all distributions by nub usage -->
  <select id="listByNubUsage" parameterType="map" resultMap="distributionResultMap">
    SELECT
    <include refid="selectNub"/>
    FROM
    <include refid="fromNub"/>
    WHERE rel.nub_fk=#{key}
    ORDER BY d.country NULLS FIRST, d.id
    <include refid="page"/>
  </select>

  <!-- get all distributions linked to a usage range -->
  <select id="listByChecklistUsageRange" parameterType="map" resultMap="distributionRangeResultMap">
    SELECT
    <include refid="select"/>
    FROM
    <include refid="from"/>
    WHERE d.usage_fk between #{start} and #{end}
  </select>

  <!-- get all distributions linked to a nub usage range -->
  <select id="listByNubUsageRange" parameterType="map" resultMap="distributionRangeResultMap">
    SELECT
    <include refid="selectNub"/>
    FROM
    <include refid="fromNub"/>
    WHERE rel.nub_fk between #{start} and #{end}
  </select>

  <!--  select all distributions of a dataset
  Using a optimal fetchsize to enable low memory footprint while keeping good performance using a resulthandler
  -->
  <select id="processDataset" parameterType="map" resultMap="distributionResultMap" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT
    <choose>
      <when test="uuid.toString() == 'd7dddbf4-2cf0-4f39-9b2a-bb099caae36c'">
        <include refid="selectNub"/>
        FROM
        <include refid="fromNub"/>
      </when>
      <otherwise>
        <include refid="select"/>
        FROM
        <include refid="from"/>
        JOIN name_usage u ON u.id=d.usage_fk
        WHERE u.dataset_key=#{uuid,jdbcType=OTHER}
      </otherwise>
    </choose>
  </select>

  <delete id="deleteByUsage">
    DELETE FROM distribution
    WHERE usage_fk = #{key}
  </delete>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    INSERT INTO distribution (usage_fk, location_id, locality, country, occurrence_status, life_stage,
      temporal, threat_status, establishment_means, appendix_cites,
      start_day_of_year, end_day_of_year, remarks, source_fk
    )
    VALUES (#{key}, #{obj.locationId}, #{obj.locality}, #{obj.country}, #{obj.status}::occurrence_status, #{obj.lifeStage}::life_stage,
      #{obj.temporal}, #{obj.threatStatus}::threat_status, #{obj.establishmentMeans}::establishment_means, #{obj.appendixCites}::cites_appendix,
      #{obj.startDayOfYear}, #{obj.endDayOfYear}, #{obj.remarks}, #{sourceKey}
    )
  </insert>

</mapper>
